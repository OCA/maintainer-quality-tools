#!/usr/bin/python
"""Usage: clone_oca_dependencies [<checkout_dir> <build_dir>]

Arguments:

deps_checkout_dir: the directory in which the dependency repositories
will be cloned
build_dir: the directory in which the tested repositories have been cloned

If no arguments are provided, default to the layout used in the OCA travis
configuration.

The program will process the file oca_dependencies.txt at the root of the
tested repository, and clone the dependency repositories in checkout_dir,
before recursively processing the oca_dependencies.txt files of the
dependencies.

The expected format for oca_dependencies.txt:

* comment lines start with # and are ignored
* a dependency line contains:
  - the name of the OCA project
  - (optional) the URL to the git repository (defaulting to the OCA repository)
  - (optional) the name of the branch to use (defaulting to ${VERSION})
"""
from __future__ import print_function
import sys
import os
import os.path as osp
import subprocess
import logging


_logger = logging.getLogger()


def parse_depfile(depsfile_path, owner='OCA'):
    deps = []
    if osp.isfile(depsfile_path):
        with open(depsfile_path) as depfile:
            for line in depfile:
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                parts = line.split()
                repo = parts[0]
                if len(parts) > 2:
                    branch = parts[2]
                else:
                    branch = os.environ.get('VERSION', '8.0')
                if len(parts) > 1:
                    url = parts[1]
                else:
                    url = 'https://github.com/%s/%s.git' % (owner, repo)
                deps.append((repo, url, branch))
    return deps


def run_shell(command):
    _logger.info('Calling %s', ' '.join(command))
    return subprocess.check_call(command)


def git_clone(checkout_path, reponame, url, branch):
    checkout_path = osp.join(checkout_path, reponame)
    if not osp.isdir(checkout_path):
        run_shell(['git', 'clone', '-q', url, '-b', branch, checkout_path])
    return checkout_path


def git_merge(checkout_path, reponame, url, branch):
    if osp.isdir(checkout_path):
        run_shell(
            ['git', 'config', '--global',
             'user.email', 'bot@odoo-community.org'])
        run_shell(
            ['git', 'config', '--global',
             'user.name', 'OCA Bot'])
        run_shell(
            ['git', '-C', checkout_path, 'fetch', url, branch])
        run_shell(
            ['git', '-C', checkout_path, 'merge', '--no-edit',
             '-X', 'ours', 'FETCH_HEAD'])
    return checkout_path


def clone_repos(method, deps_path, deps_name, target_path):
    """Recursively install all dependency repositories

    method:   function retrieving the repository
    deps_path:  path where the dependency file is
    deps_name:  name of the dependency file
    target_path:  repository destination path
    """
    deps_file_path = osp.join(deps_path, deps_name)
    if osp.isfile(deps_file_path):
        deps = parse_depfile(deps_file_path) or []
        for dep_name, url, branch in deps:
            _logger.info('Processing %s', dep_name)
            checkout_path = method(
                target_path, dep_name, url, branch)
            if checkout_path and checkout_path != target_path:
                # Only drill down if checkout was on another path
                clone_repos(
                    method, checkout_path, deps_name, target_path)


def install_requirements(parent_path):
    reqs_path = osp.join(parent_path, 'requirements.txt')
    if osp.isdir(parent_path) and osp.isfile(reqs_path):
        _logger.info('Calling %s', reqs_path)
        command = ['pip', 'install', '-r', reqs_path]
        subprocess.check_call(command)

        dir_entries = os.listdir(parent_path)
        # Don't go deeper when reaching a Python module
        if '__init__.py' not in dir_entries:
            for subdir in dir_entries:
                install_requirements(osp.join(parent_path, subdir))


def run(deps_checkout_dir, build_dir):
    clone_repos(
        git_merge, build_dir, 'oca_modules.txt', build_dir)
    clone_repos(
        git_clone, build_dir, 'oca_dependencies.txt', deps_checkout_dir)
    install_requirements(deps_checkout_dir)
    install_requirements(build_dir)


if __name__ == '__main__':
    if len(sys.argv) == 1:
        deps_checkout_dir = osp.join(os.environ['HOME'], 'dependencies')
        if not osp.exists(deps_checkout_dir):
            os.makedirs(deps_checkout_dir)
        build_dir = os.environ['TRAVIS_BUILD_DIR']
    elif len(sys.argv) == 2 or len(sys.argv) > 3:
        print(__doc__)
        sys.exit(1)
    else:
        deps_checkout_dir = sys.argv[1]
        build_dir = sys.argv[2]
    run(deps_checkout_dir, build_dir)
