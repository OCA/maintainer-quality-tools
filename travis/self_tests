#!/usr/bin/env python

import os
import subprocess
import threading
import time
import xmlrpclib

import getaddons
import travis_helpers
from test_server import main as test_server_main
from test_server import get_test_dependencies

repo_dir = os.environ.get("TRAVIS_BUILD_DIR", ".")
repo_dir_with_subfolders = os.path.join(
    repo_dir, "tests", "test_repo_with_subfolders")
exclude = os.environ.get("EXCLUDE")

addons_list = ['test_module', 'second_module']
to_preinstall = get_test_dependencies(repo_dir, addons_list)

assert not [x for x in to_preinstall if x in addons_list], \
    "Should not preinstall modules to test!"

# Testing getaddons
assert getaddons.main() == 1
getaddons.main(["getaddons.py", repo_dir])
getaddons.main(["getaddons.py", "-m", repo_dir])
getaddons.main(["getaddons.py", "-m",
                repo_dir + "/" if repo_dir[-1] == '/' else repo_dir])
if exclude:
    getaddons.main(["getaddons.py", "-m", repo_dir, "-e", exclude])
    getaddons.main(["getaddons.py", "-e", exclude, repo_dir])

# Testing addons-path order is alfanumerical
addon_paths_alfanumerical_order_is = getaddons.get_addons(
    repo_dir_with_subfolders)
addon_paths_alfanumerical_order_should = [
    '1_testfolder',
    '2_testfolder',
]
combined = []
for i, item in enumerate(addon_paths_alfanumerical_order_should):
    combined.append([addon_paths_alfanumerical_order_is[i], item])
print combined.__repr__()
assert len(combined) == len(addon_paths_alfanumerical_order_is)
for ist, should in combined:
    assert ist.rstrip('/').rstrip('\\').endswith(should)
# Testing travis helpers
assert travis_helpers.red(u'test') == u"\033[1;31mtest\033[0;m"
assert travis_helpers.green(u'test') == u"\033[1;32mtest\033[0;m"
assert travis_helpers.yellow(u'test') == u"\033[1;33mtest\033[0;m"
assert travis_helpers.yellow_light(u'test') == u"\033[33mtest\033[0;m"


assert travis_helpers.red(
    u'\ntest\nnewline') == u"\033[1;31m\033[0;m\n\033[1;31mtest\033[0;m\n\033[1;31mnewline\033[0;m"
assert travis_helpers.green(
    u'\ntest\nnewline') == u"\033[1;32m\033[0;m\n\033[1;32mtest\033[0;m\n\033[1;32mnewline\033[0;m"
assert travis_helpers.yellow(
    u'\ntest\nnewline') == u"\033[1;33m\033[0;m\n\033[1;33mtest\033[0;m\n\033[1;33mnewline\033[0;m"
assert travis_helpers.yellow_light(
    u'\ntest\nnewline') == u"\033[33m\033[0;m\n\033[33mtest\033[0;m\n\033[33mnewline\033[0;m"


# Testing empty paths and pylint_run fix of:
# https://www.mail-archive.com/code-quality@python.org/msg00294.html
if os.environ.get('LINT_CHECK', 0) == '1':
    import run_pylint
    pylint_rcfile = os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        'cfg',
        "travis_run_pylint.cfg")
    count_errors = run_pylint.main([
        "--config-file=" + pylint_rcfile,
        "--extra-params", "-d", "--extra-params", "all",
        "--extra-params", "-e", "--extra-params", "F0010,duplicate-key",
        "--path", repo_dir], standalone_mode=False)
    assert 2 == count_errors

    empty_path = os.path.join(repo_dir, 'empty_path')
    if not os.path.exists(empty_path):
        os.mkdir(empty_path)
    count_errors = run_pylint.main([
        "--config-file=" + pylint_rcfile,
        "--path", empty_path], standalone_mode=False)
    assert -1 == count_errors

    if os.environ.get('TRAVIS_PULL_REQUEST', 'false') != 'false':
        git_script_path = os.path.join(os.path.dirname(
            os.path.dirname(os.path.realpath(__file__))), 'git')
        pre_commit_returned = subprocess.call(os.path.join(
            git_script_path, 'pre-commit'))
        assert pre_commit_returned == 0, \
            "Git pre-commit script returned value != 0"

# Testing git get branch


# Testing git run from getaddons
getaddons.get_modules_changed(repo_dir)


# Testing instance running
def connection_test():
    username = "admin"
    password = "admin"
    database_name = "openerp_test"
    port = 8069
    host = '127.0.0.1'
    sock_common = xmlrpclib.ServerProxy(
        "http://%s:%d/xmlrpc/common" % (host, port))
    uid = sock_common.login(
        database_name, username, password)
    sock = xmlrpclib.ServerProxy(
        "http://%s:%d/xmlrpc/object" % (host, port))
    user_ids = sock.execute(
        database_name, uid, password, 'res.users',
        'search', [('login', '=', 'admin')])
    return user_ids


class TestServerThread(threading.Thread):
    def run(self):
        test_server_main()


if os.environ.get('INSTANCE_ALIVE') == '1' and os.environ.get('TESTS') == '1':
    thread = TestServerThread()
    thread.daemon = True
    thread.start()

    for index in range(10):
        try:
            connection_result = connection_test()
        except:
            connection_result = None
        if connection_result:
            break
        time.sleep(2)
    assert None != connection_result, "Connection test failed"
    # On TravisCI tests, force stopping the alive server
    odoo_pid = open('/tmp/odoo.pid').read()
    subprocess.call(['kill', '-9', odoo_pid])
