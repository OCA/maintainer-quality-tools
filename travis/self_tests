#!/usr/bin/env python

import os
import threading
import time
import xmlrpclib

import travis_helpers
from test_server import main as test_server_main
from test_server import get_test_dependencies

repo_dir = os.environ.get("TRAVIS_BUILD_DIR", ".")

addons_list = ['test_module', 'second_module']
to_preinstall = get_test_dependencies(repo_dir, addons_list)

assert not [x for x in to_preinstall if x in addons_list], \
    "Should not preinstall modules to test!"


# Testing travis helpers
assert travis_helpers.red(u'test') == u"\033[1;31mtest\033[0;m"
assert travis_helpers.green(u'test') == u"\033[1;32mtest\033[0;m"
assert travis_helpers.yellow(u'test') == u"\033[1;33mtest\033[0;m"
assert travis_helpers.yellow_light(u'test') == u"\033[33mtest\033[0;m"


assert travis_helpers.red(
    u'\ntest\nnewline') == u"\033[1;31m\033[0;m\n\033[1;31mtest\033[0;m\n\033[1;31mnewline\033[0;m"
assert travis_helpers.green(
    u'\ntest\nnewline') == u"\033[1;32m\033[0;m\n\033[1;32mtest\033[0;m\n\033[1;32mnewline\033[0;m"
assert travis_helpers.yellow(
    u'\ntest\nnewline') == u"\033[1;33m\033[0;m\n\033[1;33mtest\033[0;m\n\033[1;33mnewline\033[0;m"
assert travis_helpers.yellow_light(
    u'\ntest\nnewline') == u"\033[33m\033[0;m\n\033[33mtest\033[0;m\n\033[33mnewline\033[0;m"

# Testing git get branch




# Testing instance running
def connection_test():
    username = "admin"
    password = "admin"
    database_name = "openerp_test"
    port = 8069
    host = '127.0.0.1'
    sock_common = xmlrpclib.ServerProxy(
        "http://%s:%d/xmlrpc/common" % (host, port))
    uid = sock_common.login(
        database_name, username, password)
    sock = xmlrpclib.ServerProxy(
        "http://%s:%d/xmlrpc/object" % (host, port))
    user_ids = sock.execute(
        database_name, uid, password, 'res.users',
        'search', [('login', '=', 'admin')])
    return user_ids


class TestServerThread(threading.Thread):
    def run(self):
        test_server_main()


if os.environ.get('INSTANCE_ALIVE') == '1' and os.environ.get('TESTS') == '1':
    thread = TestServerThread()
    thread.daemon = True
    thread.start()

    for index in range(10):
        try:
            connection_result = connection_test()
        except:
            connection_result = None
        if connection_result:
            break
        time.sleep(2)
    assert None != connection_result, "Connection test failed"
    # On TravisCI tests, force stopping the alive server
    odoo_pid = open('/tmp/odoo.pid').read()
    subprocess.call(['kill', '-9', odoo_pid])
