#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function

import os
import sys
import tempfile

import pylint.lint

from getaddons import is_module, get_modules_changed, get_modules
from test_server import (get_default_travis_addons_path,
                         get_default_travis_server_path)


def setup_server_symlink(server_path, addons_paths,
                         symlink_path):
    """
    Create a folder with setup server with symlinks to allow execute
    `from openerp.addons import {MODULE_OTHER_PATH}` with pylint.
    We can't to use `sys.modules` in pylint by next issue:
        https://bitbucket.org/logilab/pylint/issues/616/modules-renamed-with-sysmodules-are-unable
    :param addons_paths: String of odoo addons paths splitted by commas.
    :param symlink_path: Path to create symlinks.
    :return: True if finish done
    """
    if not os.path.exists(os.path.dirname(symlink_path)):
        os.makedirs(os.path.dirname(symlink_path))
    if not os.path.lexists(symlink_path):
        os.symlink(server_path, symlink_path)
    addons_symlink_path_base = os.path.join(
        symlink_path, 'openerp', 'addons')
    for addons_path in addons_paths.split(','):
        for addon_path in os.listdir(addons_path):
            addon_symlink_path = os.path.join(
                addons_symlink_path_base, addon_path)
            if not os.path.lexists(addon_symlink_path) and \
               is_module(addon_path):
                os.symlink(
                    os.path.join(addons_path, addon_path),
                    addon_symlink_path,
                )
    return True


def run_pylint(paths_to_check, conf_file,
               sys_paths=None, extra_params=None):
    """
    Execute pylint command with extra parameters.
    :param paths_to_check: List or str of paths to check pylint.
        pylint will include recursive childs paths.
        With str you will need to use splitted commas
    :param conf_file: String with file name of config file to use.
    :param sys_paths: List or str of all paths to add to sys.path
        to support a `import PACKAGE`
        With str you will need to use splitted commas
    :param extra_params: List of extra parameters for pylint
    :return: Dict with python linter stats
    """
    if extra_params is None:
        extra_params = []
    if isinstance(paths_to_check, basestring):
        paths_to_check = paths_to_check.split(',')
    if isinstance(sys_paths, basestring):
        sys_paths = sys_paths.split(',')
    if isinstance(sys_paths, list):
        for sys_path in sys_paths:
            sys.path.append(sys_path)
    pylint_params = ['--rcfile=' + conf_file]
    pylint_params.extend(extra_params)
    pylint_params.extend(paths_to_check)
    pylint_res = pylint.lint.Run(pylint_params, exit=False)
    return pylint_res.linter.stats


def get_number_errors(linter_stats):
    """
    Verify the dictionary statistics to get number of errors.
    :param linter_stats: Dict of type pylint.lint.Run().linter.stats
    :return: Integer with quantity of
    """
    number_errors = 0
    for msg in linter_stats['by_msg']:
        number_errors += linter_stats['by_msg'][msg]
    return number_errors


def get_extra_params_from_version(version):
    '''
    Get extra pylint params by odoo version
    :param version: String with name of version of odoo
    :return: List of extra params based on version
    '''
    extra_params = []
    try:
        version_f = float(version)
    except ValueError:
        version_f = -1
    if version_f != -1 and version_f < 8:
        # Class name snake_case style to version < 8
        extra_params.append(
            '--class-rgx='
            '([a-z_][a-z0-9_]{2,45})|([A-Z_][a-zA-Z0-9]{2,45})$'
        )
    return extra_params


def which(name):
    path = os.getenv('PATH')
    for item in path.split(os.path.pathsep):
        item = os.path.join(item, name)
        if os.path.exists(item):
            return item


def main():
    '''
    Method to run pylint.
    :return: Boolean if all fine return True else False
    '''
    conf_file = os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        'cfg',
        "travis_run_pylint.cfg")
    paths_to_check = [
        os.path.join(os.environ['TRAVIS_BUILD_DIR'], module)
        for module in get_modules(
            os.environ['TRAVIS_BUILD_DIR'])
    ]
    odoo_path = get_default_travis_server_path()
    addons_path = get_default_travis_addons_path()
    instance_symlink_path = None
    sys_paths = []
    version = os.environ.get('VERSION', 'master')
    extra_params = get_extra_params_from_version(version)
    odoo_lint_path = which('pylint_plugins')
    if odoo_lint_path and os.path.exists(os.path.join(
       odoo_lint_path, 'odoo_lint.py')):
        extra_params.append('--load-plugins=odoo_lint')
        sys_paths.append(odoo_lint_path)

    if os.path.exists(odoo_path):
        instance_symlink_path = os.path.join(
            tempfile.gettempdir(), 'instance')
        setup_server_symlink(odoo_path, addons_path,
                             instance_symlink_path)
    if instance_symlink_path:
        sys_paths.append(instance_symlink_path)

    result = True
    linter_stats = run_pylint(
        paths_to_check, conf_file, sys_paths,
        extra_params=extra_params)
    number_errors = get_number_errors(linter_stats)
    is_pull_request = os.environ.get('TRAVIS_PULL_REQUEST', 'false') != 'false'
    if is_pull_request:
        # If is a pr then use new config file of pylint
        future_conf_file = os.path.join(
            os.path.dirname(os.path.realpath(__file__)),
            'cfg',
            "travis_run_pylint_pr.cfg")
        branch_name_diff = os.environ.get('TRAVIS_BRANCH', False)
        if branch_name_diff:
            modules_changed = get_modules_changed(
                os.environ['TRAVIS_BUILD_DIR'],
                'origin/' + branch_name_diff)
            paths_module_changed = [
                os.path.join(os.environ['TRAVIS_BUILD_DIR'], module_changed)
                for module_changed in modules_changed]
            if paths_module_changed:
                linter_stats = run_pylint(
                    paths_module_changed, future_conf_file,
                    sys_paths, extra_params=extra_params)
                number_errors += get_number_errors(linter_stats)
    expected_errors = int(
        os.environ.get("PYLINT_EXPECTED_ERRORS", "0"))
    if number_errors != expected_errors:
        print("pylint expected errors {expected_errors}, "
              "found {number_errors}!".format(
                  expected_errors=expected_errors,
                  number_errors=number_errors))
        result = False
    return result


if __name__ == '__main__':
    exit(int(not main()))
