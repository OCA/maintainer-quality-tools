#!/usr/bin/env python
# -*- coding: utf-8 -*-


"""This script runs `pylint` with plugins and special configuration files.
Use the following types of pylint configuration files:

 1) Global
 2) Pull request
 3) Version
 4) Beta


1) Global

  Used to check enabled messages on this file in all modules of the project.
  The result affect your build status.
  File name: `travis_run_pylint.cfg`


2) Pull request

  Used to check enabled messages on this file just in modules
  changed in a pull request of the project.
  The result affects your build status.
  File name: `travis_run_pylint_pr.cfg`


2) Version Exclusions

  Used to disable the previously enabled messages of `global` or `pull request`
  configuration files based on `VERSION` variable environment.
  File name: `travis_run_pylint_exclude_{VERSION}.cfg`


3) Beta

  Used to add the previously enabled messages in `global` or `pull request`
  configuration files that you want to display, without affecting your build
  status.

  File name: `travis_run_pylint_beta.cfg`
"""


import os
import re
import ConfigParser

import run_pylint
import travis_helpers

from getaddons import get_modules_changed
from git_run import GitRun


def get_extra_params(odoo_version):
    '''Get extra pylint params by odoo version
    Transform a seudo-pylint-conf to params,
    it to overwrite base-pylint-conf values.
    Use a seudo-inherit of configuration file.
    To avoid have a 2 config files (stable and pr-conf) by each odoo-version
    Example:

        pylint_master.conf
        pylint_master_pr.conf
        pylint_90.conf
        pylint_90_pr.conf
        pylint_80.conf
        pylint_80_pr.conf
        pylint_70.conf
        pylint_70_pr.conf
        pylint_61.conf
        pylint_61_pr.conf
        ... and new future versions.

    If you need add a new conventions in all versions
    you will need change all pr files or stables files.


    With this method you can use:

        pylint_lastest.conf
        pylint_lastest_pr.conf
        pylint_disabling_70.conf <- Overwrite params of pylint_lastest*.conf
        pylint_disabling_61.conf <- Overwrite params of pylint_lastest*.conf

    If you need add a new conventions in all versions you will need change just
    pylint_lastest_pr.conf or pylint_lastest.conf, similar to inherit.

    :param version: String with name of version of odoo
    :return: List of extra pylint params
    '''
    odoo_version = odoo_version.replace('.', '')
    version_cfg = os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        'cfg/travis_run_pylint_exclude_{odoo_version}.cfg'.format(
            odoo_version=odoo_version))
    params = []
    if os.path.isfile(version_cfg):
        config = ConfigParser.ConfigParser()
        config.readfp(open(version_cfg))
        for section in config.sections():
            for option, value in config.items(section):
                params.extend(['--' + option, value])
    return params

git_work_dir = os.environ.get('TRAVIS_BUILD_DIR', False)
is_pull_request = os.environ.get(
    'TRAVIS_PULL_REQUEST', 'false') != 'false'
branch_base = os.environ.get('TRAVIS_BRANCH', False)

extra_params_cmd = [
    '--sys-paths', os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        'pylint_deprecated_modules'),
    '--extra-params', '--load-plugins=pylint_odoo',
]
def get_beta_msgs():
    '''Get beta msgs from beta.cfg file
    :return: List of strings with beta message names'''
    beta_cfg = os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        'cfg/travis_run_pylint_beta.cfg')
    if not os.path.isfile(beta_cfg):
        return []
    config = ConfigParser.ConfigParser()
    config.readfp(open(beta_cfg))
    return [
        msg.strip()
        for msg in config.get('MESSAGES CONTROL', 'enabled2beta').split(',')
        if msg.strip()]

version = os.environ.get('VERSION', False)

if not version:
    if git_work_dir:
        repo_path = os.path.join(git_work_dir, '.git')
        branch_name = GitRun(repo_path).get_branch_name()
        version = branch_name.replace('_', '-').split('-')[:1] \
            if branch_name else False
        version = version[0] if version and len(version) else None

if version:
    extra_params = get_extra_params(version)
    for extra_param in extra_params:
        extra_params_cmd.extend([
            '--extra-params', extra_param
        ])
    is_version_number = re.match(r'\d+\.\d+', version)
    if is_version_number:
        extra_params_cmd.extend([
            '--extra-params', '--valid_odoo_versions=%s' % version])
else:
    print(travis_helpers.yellow('Undefined environment variable `VERSION`.'
          '\nSet `VERSION` for compatibility with guidelines by version.'))


beta_msgs = get_beta_msgs()
[extra_params_cmd.extend(['--msgs-no-count', beta_msg])
 for beta_msg in beta_msgs]

# Look for an environment variable
# whose value is the name of a proper configuration file for pylint
# (this file will then be expected to be found in the 'cfg/' folder).
# If such an environment variable is not found,
# it defaults to the standard configuration file.
pylint_config_file = os.environ.get('PYLINT_CONFIG_FILE',
                                    'travis_run_pylint.cfg')
pylint_rcfile = os.path.join(
    os.path.dirname(os.path.realpath(__file__)),
    'cfg',
    pylint_config_file)
count_errors = run_pylint.main([
    "--config-file=" + pylint_rcfile,
    ] + extra_params_cmd, standalone_mode=False)

pylint_rcfile_pr = os.path.join(
    os.path.dirname(os.path.realpath(__file__)),
    'cfg',
    "travis_run_pylint_pr.cfg")


if is_pull_request and branch_base and git_work_dir:
    if branch_base != 'HEAD':
        branch_base = 'origin/' + branch_base
    modules_changed = get_modules_changed(
        git_work_dir,
        branch_base)
    if modules_changed and count_errors >= 0:
        print(travis_helpers.green(
            'Start lint check just in modules changed'))
        modules_changed_cmd = []
        for module_changed in modules_changed:
            modules_changed_cmd.extend([
                '--path',
                module_changed,
            ])
        pr_errors = run_pylint.main([
            "--config-file=" + pylint_rcfile_pr,
        ] + modules_changed_cmd + extra_params_cmd, standalone_mode=False)
        if pr_errors:
            print(travis_helpers.yellow(
                "Found {pr_errors} errors".format(pr_errors=pr_errors) +
                " in modules changed."
            ))
            if pr_errors < 0:
                count_errors = pr_errors
            else:
                count_errors += pr_errors
else:
    # TODO: Add git hook case in other PR
    pass
expected_errors = int(
    os.environ.get('PYLINT_EXPECTED_ERRORS', 0))

exit_status = 0
if count_errors == -1:
    print(travis_helpers.yellow('Python modules not found'))
elif count_errors != expected_errors:
    print(travis_helpers.red("pylint expected errors {expected_errors}, "
          "found {number_errors}!".format(
              expected_errors=expected_errors,
              number_errors=count_errors)))
    exit_status = 1
if beta_msgs and count_errors >= 0:
    print(travis_helpers.green(
        "\nNext checks are still in beta "
        "they won't affect your build status for now: "
        '\n' + ', '.join(sorted(beta_msgs))))

exit(exit_status)
