#!/usr/bin/env python

from __future__ import print_function

import re
import os
import subprocess
import sys
from getaddons import get_addons
from getaddons import get_modules


def has_test_errors(fname, dbname, odoo_version):
    """
    Check a list of log lines for test errors.
    Extension point to detect false positives.
    """
    # Rules defining checks to perform
    # this can be
    # - a string which will be checked in a simple substring match
    # - a regex object that will be matched against the whole message
    # - a callable that receives a dictionary of the form
    #     {
    #         'loglevel': ...,
    #         'message': ....,
    #     }
    ERRORS_IGNORE = [
        'Mail delivery failed',
        'failed sending mail',
        ]
    ERRORS_REPORT = [
        lambda x: x['loglevel'] == 'CRITICAL',
        'At least one test failed',
        'no access rules, consider adding one',
        ]
    # Only check ERROR lines before 7.0
    if odoo_version < '7.0':
        ERRORS_REPORT.append(
            lambda x: x['loglevel'] == 'ERROR')

    def make_pattern_list_callable(pattern_list):
        for i in range(len(pattern_list)):
            if isinstance(pattern_list[i], basestring):
                regex = re.compile(pattern_list[i])
                pattern_list[i] = lambda x: regex.match(x['message'])
            elif hasattr(pattern_list[i], 'match'):
                regex = pattern_list[i]
                pattern_list[i] = lambda x: regex.match(x['message'])

    make_pattern_list_callable(ERRORS_IGNORE)
    make_pattern_list_callable(ERRORS_REPORT)

    print("-"*10)
    # Read log file removing ASCII color escapes:
    # http://serverfault.com/questions/71285
    color_regex = re.compile(r'\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]')
    log_start_regex = re.compile(
        r'^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3} \d+ (?P<loglevel>\w+) '
        '(?P<db>(%s)|([?])) (?P<logger>\S+): (?P<message>.*)$' % dbname)
    log_records = []
    last_log_record = dict.fromkeys(log_start_regex.groupindex.keys())
    with open(fname) as log:
        for line in log:
            line = color_regex.sub('', line)
            match = log_start_regex.match(line)
            if match:
                last_log_record = match.groupdict()
                log_records.append(last_log_record)
            else:
                last_log_record['message'] = '%s\n%s' % (
                    last_log_record['message'], line.rstrip('\n')
                )
    errors = []
    for log_record in log_records:
        ignore = False
        for ignore_pattern in ERRORS_IGNORE:
            if ignore_pattern(log_record):
                ignore = True
                break
        if ignore:
            break
        for report_pattern in ERRORS_REPORT:
            if report_pattern(log_record):
                errors.append(log_record['message'])
                break

    if not [r for r in log_records if 'Modules loaded.' == r['message']]:
        errors.append({'message': "Modules loaded message not found."})

    if errors:
        for e in errors:
            print(e['message'])
        print("-"*10)
    return len(errors)


def parse_list(comma_sep_list):
    return [x.strip() for x in comma_sep_list.split(',')]


def main():
    travis_home = os.environ.get("HOME", "~/")
    travis_build_dir = os.environ.get("TRAVIS_BUILD_DIR", "../..")
    odoo_unittest = os.environ.get("UNIT_TEST")
    odoo_exclude = os.environ.get("EXCLUDE")
    odoo_include = os.environ.get("INCLUDE")
    odoo_version = os.environ.get("VERSION")
    options = os.environ.get("OPTIONS", "")
    install_options = os.environ.get("INSTALL_OPTIONS", "")
    if not odoo_version:
        # For backward compatibility, take version from parameter
        # if it's not globally set
        odoo_version = sys.argv[1]
        print("WARNING: no env variable set for VERSION. "
              "Using '%s'" % odoo_version)

    if odoo_version == "6.1":
        install_options = ''.join([install_options,
                                   ' ' if install_options else '',
                                   "--test-disable"])
    else:
        options = ''.join([options, ' ' if options else '', "--test-enable"])

    odoo_full = os.environ.get("ODOO_REPO", "odoo/odoo")
    odoo_org, odoo_repo = odoo_full.split('/')
    server_dirname = "%s-%s" % (odoo_repo, odoo_version)
    server_path = os.path.join(travis_home, server_dirname)
    # Calculate addons_path
    addons_path_list = get_addons(travis_home)
    addons_path_list.insert(0, travis_build_dir)
    addons_path_list.append(server_path + "/addons")
    addons_path = ','.join(addons_path_list)

    if odoo_include:
        tested_addons_list = parse_list(odoo_include)
    else:
        tested_addons_list = get_modules(travis_build_dir)

    if odoo_exclude:
        exclude_list = parse_list(odoo_exclude)
        tested_addons_list = [
            x for x in tested_addons_list
            if x not in exclude_list]
    tested_addons = ','.join(tested_addons_list)

    print("Working in %s" % travis_build_dir)
    print("Using repo %s and addons path %s" % (odoo_full, addons_path))

    if not tested_addons:
        print("WARNING!\nNothing to test- exiting early.")
        return 0
    else:
        print("Modules to test: %s" % tested_addons)

    ## setup the base module without running the tests
    print("\nCreating test instance:")
    dbtemplate = "openerp_test"
    subprocess.check_call("createdb %s" % dbtemplate, shell=True)

    preinstall_modules = 'mail' if odoo_unittest else tested_addons
    cmd_odoo = "%s/openerp-server %s -d %s --stop-after-init " \
               "--addons-path=%s --init=%s --log-level=warn"
    cmd_options = (server_path, install_options, dbtemplate,
                   addons_path, preinstall_modules)
    subprocess.check_call(cmd_odoo % cmd_options, shell=True)

    # Running tests
    if odoo_unittest:
        database = "openerp_unittest"
        subprocess.call(["createdb", "-T", dbtemplate, database])
        to_test_list = tested_addons_list
        log_level = "warn"
        cmd_coverage = ""  # don't calculate coverage
    else:
        database = "openerp_test"
        to_test_list = [tested_addons]
        log_level = "test"
        cmd_coverage = "coverage run "

    for to_test in to_test_list:
        print("\n" + "="*40)
        print("Testing %s:" % to_test)
        if odoo_unittest:
            subprocess.call(["dropdb", database])
            subprocess.call(["createdb", "-T", dbtemplate, database])
            # preinstall unit tested module to avoid testing dependencies
            cmd_odoo = "%s/openerp-server %s -d %s --stop-after-init " \
                       "--addons-path=%s --init=%s --log-level=error"
            cmd_options = (server_path, install_options, database,
                           addons_path, to_test)
            command = cmd_odoo % cmd_options
            print(command)
            subprocess.check_call(command, shell=True)

        cmd_odoo = "%s%s/openerp-server %s -d %s" \
                   " --stop-after-init --log-level=%s" \
                   " --addons-path=%s --init=%s"
        cmd_options = (cmd_coverage, server_path, options, database,
                       log_level, addons_path, to_test)
        command = cmd_odoo % cmd_options
        print(command)
        # Run test command; unbuffer keeps output colors
        command_call = "unbuffer %s | tee stdout.log" % command
        subprocess.check_call(command_call, shell=True)
        # Find errors, except from failed mails
        errors = has_test_errors("stdout.log", database, odoo_version)
        if errors:
            print("Found %d lines with errors" % errors)
            return 1
    # if we get here, all is OK
    return 0

if __name__ == '__main__':
    exit(main())
