#!/bin/bash

set -e

if [ "${LINT_CHECK}" != "0" ]; then
    pip install -q flake8 Click pylint-mccabe

    # Install pylint plugin depends without lxml
    wget -q https://raw.githubusercontent.com/OCA/pylint-odoo/master/requirements.txt -O ${HOME}/maintainer-quality-tools/travis/pylint_odoo_requirements.txt
    find -L ${HOME}/maintainer-quality-tools/travis -name pylint_odoo_requirements.txt -exec sed -i '/lxml/d'  {} \;  #  lxml depends is too slow
    pip install --upgrade -r ${HOME}/maintainer-quality-tools/travis/pylint_odoo_requirements.txt
    pip install --upgrade --pre --no-deps git+https://github.com/OCA/pylint-odoo.git   # To use last version ever
    npm install -g eslint  # Extra package for pylint-odoo plugin
    if [ -f "${HOME}/.nvm/nvm.sh" ]; then
        # Update nodejs v6.latest required by eslint
        # Using nvm of travis
        CURRENT_NODE=$(which node)
        source ${HOME}/.nvm/nvm.sh
        nvm install 6
        ln -sf $(nvm which 6) $CURRENT_NODE
    fi
fi

# We can exit here and do nothing if this only a LINT check
if [ "${TESTS}" != "1" ] && [ "${LINT_CHECK}" == "1" ]; then
    exit 0
fi


# Install less
ln -s `which nodejs` $HOME/maintainer-quality-tools/travis/node
npm install -g less less-plugin-clean-css


# Update PhantomJS (v10 compat)
if [ "${PHANTOMJS_VERSION}" != "OS" ]; then
    npm install --prefix ${TRAVIS_BUILD_DIR} "phantomjs-prebuilt@${PHANTOMJS_VERSION:=latest}"
    ln -s "${TRAVIS_BUILD_DIR}/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs" "${HOME}/maintainer-quality-tools/travis/phantomjs"
fi

# For backward compatibility, take version from parameter if it's not globally set
if [ "x${VERSION}" == "x" ] ; then
    VERSION="${1}"
    echo "WARNING: no env variable set for VERSION. Using '${1}'."
fi

: ${ODOO_REPO:="odoo/odoo"}  # default value, if not set
IFS="/" read -a REPO <<< "${ODOO_REPO}"
export REMOTE="${REPO[0],,}"
export REPO_NAME="${REPO[1]}"
export BRANCH="${VERSION}"
export ODOO_PATH=${HOME}/$REPO_NAME-$BRANCH
if [ -z "${REPO_CACHED}"  ]; then
    export ODOO_URL="https://github.com/$REMOTE/$REPO_NAME/archive/$BRANCH.tar.gz"
    echo "Installing Odoo $ODOO_URL"
    wget -nv -O odoo.tar.gz $ODOO_URL
    tar -xf odoo.tar.gz -C ${HOME}
else
    echo "Using Odoo from cache ${REPO_CACHED}"
    chown `(whoami)`:`(id -gn)` -R ${REPO_CACHED}
    ln -sf ${REPO_CACHED}/odoo ${ODOO_PATH}
    cd ${ODOO_PATH} \
        && git fetch --depth=1 ${REMOTE} ${BRANCH} \
        && git config --local --bool core.bare false \
        && git checkout -b ${BRANCH}-${REMOTE} -qf ${REMOTE}/${BRANCH}
fi

# Workaround to force using system site packages (see https://github.com/Shippable/support/issues/241#issuecomment-57947925)
rm -f $VIRTUAL_ENV/lib/python2.7/no-global-site-packages.txt
pip install --upgrade pip
pip install --user -q --no-binary pycparser -r $(dirname ${BASH_SOURCE[0]})/requirements.txt
pip install -q QUnitSuite coveralls codecov

# Use reference .coveragerc
cp ${HOME}/maintainer-quality-tools/cfg/.coveragerc .

echo "Getting addons dependencies"
clone_oca_dependencies
clone_result=$?
if [ "$clone_result" != "0"  ]; then
    echo "Error cloning dependencies"
    exit $clone_result
fi;

echo "Install webkit (wkhtmltopdf) patched"
(cd ${HOME}/maintainer-quality-tools/travis/ && wget -qO- https://downloads.wkhtmltopdf.org/0.12/0.12.3/wkhtmltox-0.12.3_linux-generic-amd64.tar.xz | tar -xJ --strip-components=2 wkhtmltox/bin/wkhtmltopdf)

# Expected directory structure:
#
#    HOME/
#     |___ <OdooRepo>-<Branch>/         <-- Odoo Server
#     |___ maintainer-quality-tools/
#     |___ build/<Owner>/<TestedRepo>/
#     |___ dependencies/<DependencyRepo1>/
#     |___ dependencies/<DependencyRepo2>/
#     |...
echo "Content of ${HOME}:"
ls -l ${HOME}

echo "Content of ${HOME}/dependencies:"
mkdir -p ${HOME}/dependencies && ls -l ${HOME}/dependencies

set +e
