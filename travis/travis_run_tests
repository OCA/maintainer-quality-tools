#!/usr/bin/env python

from __future__ import print_function

import os
import subprocess
import sys
from getaddons import get_addons
from getaddons import get_modules


def has_test_errors(fname, database):
    """
    Check a list of log lines for test errors.
    Extension point to detect false positives.
    """
    print("--------")
    # Read log file removing ASCII color escapes:
    # http://serverfault.com/questions/71285
    cmd = 'sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" %s' % fname
    stdout = subprocess.check_output(cmd, shell=True).split('\n')
    errors = [
        x for x in stdout
        if "mail" not in x
        and ("ERROR %s" % database in x
             or "CRITICAL %s" % database in x
             or "At least one test failed" in x)]
    if errors:
        print("--------")
        for e in errors:
            print(e)
    return len(errors)


def parse_list(comma_sep_list):
    return [x.strip() for x in comma_sep_list.split(',')]


def main():
    travis_home = os.environ.get("HOME", "~/")
    travis_build_dir = os.environ.get("TRAVIS_BUILD_DIR", "../..")
    odoo_exclude = os.environ.get("EXCLUDE")
    odoo_include = os.environ.get("INCLUDE")
    odoo_version = os.environ.get("VERSION")
    if not odoo_version:
        # For backward compatibility, take version from parameter
        # if it's not globally set
        odoo_version = sys.argv[1]
        print("WARNING: no env variable set for VERSION. "
              "Using '%s'" % odoo_version)

    if odoo_version == "6.1":
        options = ""
        install_options = "--test-disable"
    else:
        options = "--test-enable"
        install_options = ""

    odoo_full = os.environ.get("ODOO_REPO", "odoo/odoo")
    odoo_org, odoo_repo = odoo_full.split('/')
    server_path = "../%s-%s" % (odoo_repo, odoo_version)
    # Calculate addons_path
    addons_path_list = get_addons(travis_home)
    addons_path_list.insert(0, travis_build_dir)
    addons_path_list.append(server_path + "/addons")
    addons_path = ','.join(addons_path_list)

    if odoo_include:
        tested_addons_list = parse_list(odoo_include)
    else:
        tested_addons_list = get_modules(travis_build_dir)

    if odoo_exclude:
        exclude_list = parse_list(odoo_exclude)
        tested_addons_list = [
            x for x in tested_addons_list
            if x not in exclude_list]
    tested_addons = ','.join(tested_addons_list)

    print("Working in %s" % travis_build_dir)
    print("Using repo %s and addons path %s" % (odoo_full, addons_path))

    if not tested_addons:
        print("WARNING!\nNothing to test- exiting early.")
        return 0
    else:
        print("Modules to test: %s" % tested_addons)

    ## setup the base module without running the tests
    print("\nCreating test instance:")
    database = "openerp_test"
    subprocess.check_call("createdb %s" % database, shell=True)

    cmd_odoo = "%s/openerp-server %s -d %s --stop-after-init " \
               "--addons-path=%s --init=%s"
    cmd_options = (server_path, install_options, database,
                   addons_path, tested_addons)
    subprocess.check_call(cmd_odoo % cmd_options, shell=True)

    print("\nRunning tests:")
    cmd_odoo = "coverage run %s/openerp-server %s -d %s --stop-after-init " \
               "--addons-path=%s --init=%s --log-level=debug"
    cmd_options = (server_path, options, database,
                   addons_path, tested_addons)
    command = cmd_odoo % cmd_options
    print(command)
    # Run test command; unbuffer keeps output colors
    command_call = "unbuffer %s | tee stdout.log" % command
    subprocess.check_call(command_call, shell=True)
    # Find errors, except from failed mails
    errors = has_test_errors("stdout.log", database)
    if errors:
        print("Found %d lines with errors" % errors)
        return 1
    # if we get here, all is OK
    return 0

if __name__ == '__main__':
    exit(main())
